#!/usr/bin/env ruby

require 'timeout'
require 'fileutils'

socks = Dir.glob("/tmp/ssh-*/agent.*").select {|x| File.owned?(x)}

def user_for(filename)
  Timeout.timeout(10) do
    output = %x[SSH_AUTH_SOCK=#{filename} ssh git@github.com 2>&1]
    (output =~ /Hi (.*)!/ && $1)
  end
rescue Timeout::Error
  :timeout
end

user = ARGV.first
sock = case user
       when "cleanup"
         socks.each do |filename|
           puts "trying #{filename}"
           case user_for(filename)
           when :timeout
             puts "removing #{filename}"
             FileUtils.rm(filename)
           end
         end

         abort "All socks are good"
       when nil
         socks.sort_by { rand }.first
       else
         puts "finding sock for user #{user}"
         socks.find { |filename| user == user_for(filename) }
       end

if sock
  puts %x[export SSH_AUTH_SOCK=#{sock}]
else
  $stderr.puts "No socket found"
end
